plugins {
    id 'java'

    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'free.notification'
version = '0.9'

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
    implementation("org.springframework.boot:spring-boot-starter-web:3.1.1")

    implementation files('lib/json-20230618.jar')

    // Source: https://github.com/software-tool/recordlib-java
    implementation files('lib/recordlib-1.0.jar')

    // Lombok
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // https://mvnrepository.com/artifact/jakarta.mail/jakarta.mail-api
    //implementation 'jakarta.mail:jakarta.mail-api:2.1.0'
    // https://mvnrepository.com/artifact/com.sun.mail/jakarta.mail
    implementation 'com.sun.mail:jakarta.mail:2.0.1'
    implementation 'com.sun.activation:jakarta.activation:2.0.1'

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

// Optional: Defined a semicolon-separated list of destination directories to copy the jar file to
def copyDestinations = project.findProperty('copyDestinations')
if (copyDestinations != null && !copyDestinations.toString().isEmpty()) {
    def copyDestinationsArr = copyDestinations.split(";")
    task copyJarToDestinations {
        doLast {
            def sourceFile = file('build/libs/messages-server-0.9.jar')
            copyDestinationsArr.each { dest ->
                copy {
                    from sourceFile
                    into dest
                }

                project.logger.lifecycle('Copy: ' + sourceFile + " > " + dest)
            }
        }
    }
} else {
    // Empty Task
    task copyJarToDestinations {
    }
}

bootJar {
    finalizedBy copyJarToDestinations
}